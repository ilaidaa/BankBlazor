

@page "/customer-profile"
@inject HttpClient Http 
<h1>Sök Kundprofil</h1> <!--Rubrik -->

<!-- input binds till inputId så det användaren skriver uppdaterar inputID, i gråfält får user info om att skriva kundID och typen säger att det bara får vara nummer-->
<label>Ange kund-ID</label>
<input @bind="inputId" placeholder="Ange kund-ID" type="number" />
<button @onclick="SearchCustomer">Sök</button> <!--button är knapp som är kopplad till SearchCustomer metoden-->


@if (loading) //Loading är deklarerad längre ner i koden och det är en skillnad från C# man går inte bara uppifrån ner 
{
    <p>Laddar kundinformation...</p>
}
// Om customer inte är null körs allt i else if blocket och konto id och saldo visas @ disp är variabeln som du gjorde i foreach loopen
else if (customer != null)
{
    <h3>@customer.Givenname @customer.Surname</h3>
    <p>Adress: @customer.Streetaddress, @customer.City</p>

    <h4>Konton:</h4>
    <ul>
        @foreach (var disp in customer.Dispositions)
        {
            <li>
                Konto-ID: @disp.AccountId
                Saldo: @disp.Account.Balance kr
            </li>
            <li>
                Saldo: @disp.Account.Balance kr
            </li>
        }
    </ul>
}
else if (searched)
{
    <p style="color:red;">Ingen kund hittades med ID @inputId.</p> // Du behöver inte ha färg men det blir snyggt
}



@code {// varje gång du skriver @code ska C# kod komma
    
    private int inputId;
    private Customer? customer; // Skapa en customer som bara kan användas i denna klass
                               // ? menar att den kan va null medan den laddar och vi ska hantera, vilket vi egentligen längst upp gjorde
    // Här kommer alla variablar som är inne i if satserna ovan
    private bool loading = false;
    private bool searched = false;

          
    // Här kommer metoden SearchCustomer men i async och den ska hämta Id man söker på via json och returnera 
    private async Task SearchCustomer()
    {
        loading = true;
        searched = true;

        try
        {
            customer = await Http.GetFromJsonAsync<Customer>($"https://localhost:7299/api/customer/{inputId}");
        }
        catch
        {
            customer = null;
        }

        loading = false;
    }
    

    // Vad är allt som kommer nere?
    // När du anropar API:t så skickar servern tillbaka JSON-data.
    //  Men C# fattar inte JSON direkt – du måste säga hur datan ser ut genom att skapa modeller, alltså klasser.

    public class Customer
    {
        
        public int CustomerId { get; set; }
        public string Givenname { get; set; }
        public string Surname { get; set; }
        public string Streetaddress { get; set; }
        public string City { get; set; }
        public List<Disposition> Dispositions { get; set; } = new();
    }

    // Disposition är kopplingar till konton så de mellanhandel mellan kund och deras konton
    public class Disposition
    {
        public int DispositionId { get; set; }
        public int AccountId { get; set; }
        public Account Account { get; set; } = new();
    }

    public class Account
    {
        public int AccountId { get; set; }
        public decimal Balance { get; set; }
    }
}
